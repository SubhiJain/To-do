[{"C:\\Users\\subhij\\ToDoList\\to-do\\src\\index.js":"1","C:\\Users\\subhij\\ToDoList\\to-do\\src\\App.js":"2","C:\\Users\\subhij\\ToDoList\\to-do\\src\\reportWebVitals.js":"3","C:\\Users\\subhij\\ToDoList\\to-do\\src\\components\\Todo.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":198,"mtime":1610681020755,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":6753,"mtime":1610683427907,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"7g2m4x",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"C:\\Users\\subhij\\ToDoList\\to-do\\src\\index.js",[],["21","22"],"C:\\Users\\subhij\\ToDoList\\to-do\\src\\App.js",["23"],"import logo from './logo.svg';\nimport './App.css';\nimport Todo from './components/Todo';\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\subhij\\ToDoList\\to-do\\src\\reportWebVitals.js",[],"C:\\Users\\subhij\\ToDoList\\to-do\\src\\components\\Todo.js",["24","25","26","27"],"import React, { Component } from 'react'\r\nimport { Pivot, PivotItem, PivotLinkSize } from 'office-ui-fabric-react/lib/Pivot';\r\nimport { DefaultButton, PrimaryButton, Stack, IStackTokens } from 'office-ui-fabric-react';\r\nimport { Checkbox, ICheckboxProps } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport { Depths } from '@uifabric/fluent-theme';\r\n\r\nexport default class Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = \r\n        { \r\n          items: localStorage.getItem(\"list\")?JSON.parse(localStorage.getItem(\"list\")):[],\r\n          itemSelected: null,\r\n          type:'Add'\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.edit = this.edit.bind(this);\r\n        this.delete = this.delete.bind(this);\r\n    }\r\n\r\n     onChange (e,checked,item) {\r\n       console.log(e,checked,item);\r\n       let tempItems = this.state.items\r\n       for(let i=0;i<tempItems.length;i++){\r\n           if(tempItems[i].id === item.id){\r\n            tempItems[i].status= tempItems[i].status === \"Active\"?\"Complete\":\"Active\";\r\n            this.setState(\r\n                {\r\n                    items:tempItems,                   \r\n                 },()=>{\r\n                 localStorage.setItem(\"list\",JSON.stringify(this.state.items))\r\n             });\r\n           }\r\n       }\r\n      }\r\n\r\n      edit(item){\r\n        this.setState({ itemSelected: item, type :\"Save\" });\r\n      }\r\n\r\n      delete(item){\r\n          let index = this.state.items.indexOf(item);\r\n          let tempItems = this.state.items;\r\n          tempItems.splice(index,1);\r\n        this.setState ({\r\n            items: tempItems,\r\n            text: ''\r\n          },()=>{\r\n              localStorage.setItem(\"list\",JSON.stringify(this.state.items))\r\n          });\r\n      }\r\n\r\n      handleChange(e) {\r\n        const newItem = {\r\n            text: e.target.value,\r\n            id:this.state.itemSelected? this.state.itemSelected.id:\"\",\r\n            status:\"Active\"\r\n            };\r\n        this.setState({ itemSelected : newItem });\r\n      }\r\n    \r\n      handleSubmit(e) {\r\n        e.preventDefault();\r\n        if(this.state.type === \"Add\")\r\n        {\r\n            if (this.state.itemSelected && this.state.itemSelected.text.length === 0) {\r\n            return;\r\n            }\r\n            const newItem = {\r\n                text: this.state.itemSelected.text,\r\n                id: Date.now(),\r\n                status:this.state.itemSelected.status\r\n            };\r\n            this.setState(state => ({\r\n                items: state.items.concat(newItem),\r\n                itemSelected: null\r\n            }),()=>{\r\n                localStorage.setItem(\"list\",JSON.stringify(this.state.items))\r\n            });\r\n        }\r\n        else{\r\n            let tempItems = this.state.items\r\n           for(let i=0;i<tempItems.length;i++){\r\n               if(tempItems[i].id === this.state.itemSelected.id){\r\n                tempItems[i].text= this.state.itemSelected.text;\r\n               }\r\n           }\r\n           this.setState(\r\n               {\r\n                   items:tempItems,\r\n                   itemSelected: null,\r\n                   type:\"Add\"\r\n                },()=>{\r\n                localStorage.setItem(\"list\",JSON.stringify(this.state.items))\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let ActiveItems = this.state.items.filter((a)=> a.status === \"Active\");\r\n        let CompleteItems = this.state.items.filter((a)=> a.status === \"Complete\");\r\n        return (\r\n            <div>\r\n              <h3>TODO</h3>\r\n            <Pivot aria-label=\"Large Link Size Pivot Example\" linkSize={PivotLinkSize.large}>\r\n              <PivotItem headerText=\"All\">\r\n              <div className=\"header\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                  <label htmlFor=\"new-todo\">\r\n                   Enter new to-do task : \r\n                  </label>\r\n                  <input\r\n                    id=\"new-todo\"\r\n                    onChange={this.handleChange}\r\n                    value={this.state.itemSelected?this.state.itemSelected.text:\"\"}\r\n                  />\r\n                  <button>\r\n                    {this.state.type}\r\n                  </button>\r\n                </form>\r\n            </div>\r\n              <TodoList items={this.state.items} \r\n                            edit={(item)=> this.edit(item)}\r\n                            delete={(item)=> this.delete(item)}\r\n                            onChange={(e,checked,item)=> this.onChange(e,checked,item)}\r\n                            />\r\n              </PivotItem>\r\n              <PivotItem headerText=\"Complete\">\r\n              <TodoList \r\n                            disabled = {true}\r\n                            items={CompleteItems} \r\n                            edit={(item)=> this.edit(item)}\r\n                            delete={(item)=> this.delete(item)}\r\n                            onChange={(e,checked,item)=> this.onChange(e,checked,item)}\r\n                            />\r\n              </PivotItem>\r\n              <PivotItem headerText=\"Active\">\r\n              <TodoList \r\n                            disabled = {true}\r\n                            items={ActiveItems} \r\n                            edit={(item)=> this.edit(item)}\r\n                            delete={(item)=> this.delete(item)}\r\n                            onChange={(e,checked,item)=> this.onChange(e,checked,item)}\r\n                            />\r\n              </PivotItem>\r\n            </Pivot>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass TodoList extends React.Component {\r\n    render() {\r\n      return (\r\n        <div style={{ boxShadow: Depths.depth8, padding: \"15px\" }}>\r\n          {this.props.items.map(item => (\r\n            <div key={item.id} style={{justifyContent:'center', display:'flex', alignItems:'center'}}>\r\n                    <Checkbox \r\n                        label={item.text} \r\n                        checked={item.status === \"Active\"?false:true} \r\n                        onChange={(e,checked)=> this.props.onChange(e,checked,item)} \r\n                        styles={{root:{\r\n                            padding:'5px'\r\n                        },\r\n                        label:{\r\n                            padding:'6px'\r\n                        }}}\r\n                    />  \r\n                    <PrimaryButton styles={{root:{marginLeft:'5px'}}} text=\"Edit\" onClick={()=> this.props.edit(item)} allowDisabledFocus  />\r\n                    <PrimaryButton styles={{root:{marginLeft:'5px'}}} text=\"Delete\" onClick={()=> this.props.delete(item)} allowDisabledFocus  />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":8,"nodeType":"34","messageId":"35","endLine":1,"endColumn":12},{"ruleId":"32","severity":1,"message":"36","line":3,"column":10,"nodeType":"34","messageId":"35","endLine":3,"endColumn":23},{"ruleId":"32","severity":1,"message":"37","line":3,"column":40,"nodeType":"34","messageId":"35","endLine":3,"endColumn":45},{"ruleId":"32","severity":1,"message":"38","line":3,"column":47,"nodeType":"34","messageId":"35","endLine":3,"endColumn":59},{"ruleId":"32","severity":1,"message":"39","line":4,"column":20,"nodeType":"34","messageId":"35","endLine":4,"endColumn":34},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'DefaultButton' is defined but never used.","'Stack' is defined but never used.","'IStackTokens' is defined but never used.","'ICheckboxProps' is defined but never used.","no-global-assign","no-unsafe-negation"]